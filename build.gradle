plugins {
    id 'java'
    id 'org.springframework.boot' version '2.6.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "com.github.node-gradle.node" version "3.2.1"
}

apply from: "frontend.gradle"

bootJar {
    into("static") {
        from clientArtifacts
    }
}

jar {
    baseName = 'app'
    version = '0.0.1'
}

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-configuration-processor")
    implementation("org.postgresql:postgresql")
    implementation("org.flywaydb:flyway-core")
    implementation("org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.1.7.RELEASE")
    implementation("org.springframework.security.oauth:spring-security-oauth2:2.3.6.RELEASE")
    implementation("com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.4")

    compileOnly 'org.projectlombok:lombok'

    testImplementation("org.springframework.boot:spring-boot-starter-test")

    annotationProcessor 'org.projectlombok:lombok'
}

tasks.named('test') {
    useJUnitPlatform()
}

task startPostgresqlDockerImageWithDocker(type: Exec) {
    workingDir 'docker/postgresql'
    commandLine './start-local-db-with-docker.sh'
}

task startPostgresqlDockerImageWithLima(type: Exec) {
    workingDir 'docker/postgresql'
    commandLine './start-local-db-with-lima.sh'
}
